# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:22:39+00:00

from __future__ import annotations

from datetime import datetime as datetime_aliased
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class Type(Enum):
    inbox = 'inbox'
    get_todo_count = 'get-todo-count'
    get_todo_escalated_count = 'get-todo-escalated-count'
    get_oldest_todo = 'get-oldest-todo'
    get_oldest_escalated_todo = 'get-oldest-escalated-todo'
    get_finished_me = 'get-finished-me'
    get_finished_team = 'get-finished-team'
    next_document = 'next-document'
    prev_document = 'prev-document'
    get_next_uuid = 'get-next-uuid'
    avg_time = 'avg-time'


class AnnotationOptions(BaseModel):
    add_text: Optional[bool] = False
    include: Optional[bool] = False


class AuthModel(BaseModel):
    password: str = Field(..., description='the user password')
    username: str = Field(..., description='the user username')


class ChangePasswordModelPost(BaseModel):
    new_password: Optional[str] = Field(None, description="the new user's password")
    old_password: Optional[str] = Field(None, description="the old user's password")


class Event(Enum):
    document_predict = 'document_predict'
    document_evaluate = 'document_evaluate'
    document_text = 'document_text'
    document_split = 'document_split'
    document_delete = 'document_delete'


class What(Enum):
    original = 'original'
    reply_to = 'reply_to'
    ready = 'ready'
    submit = 'submit'


class CustomAtom(BaseModel):
    pass


class How(Enum):
    FULL = 'FULL'
    SOURCE_FILES = 'SOURCE_FILES'


class What1(Enum):
    ALL = 'ALL'
    DONE = 'DONE'


class DataRetentionAtomModel(BaseModel):
    age: Optional[int] = Field(-1, examples=[30])
    how: Optional[How] = Field('FULL', examples=['FULL'])
    what: Optional[What1] = Field('ALL', examples=['ALL'])


class DataRetentionModelPatch(BaseModel):
    settings: Optional[List[DataRetentionAtomModel]] = None


class DocumentIds(BaseModel):
    document_ids: Optional[List[str]] = None


class DocumentTypeModel(BaseModel):
    display_name: Optional[str] = None
    field_name: str


class DocumentTypeModelGet(BaseModel):
    document_types: Optional[List[DocumentTypeModel]] = None


class EnrichmentModelPost(BaseModel):
    pass


class EvaluationAtom(BaseModel):
    gold: str
    text: str
    textual_coord: List[int] = Field(..., max_length=6, min_length=6)
    visual_coord: Optional[List[int]] = Field(None, max_length=6, min_length=6)


class EvaluationsOptions(BaseModel):
    additional_column: Optional[str] = None
    include: Optional[bool] = False


class ExcelAtom(BaseModel):
    add_automation_blockers: Optional[bool] = Field(None, examples=[False])
    add_confidence: Optional[bool] = Field(None, examples=[False])
    add_text: Optional[bool] = Field(None, examples=[True])
    enable_key_value: bool = Field(..., examples=[False])
    multiple_value_separator: Optional[constr(min_length=1, max_length=1)] = Field(
        None, examples=[';']
    )


class ExtraModel(BaseModel):
    entity_id: Optional[str] = Field(
        None,
        description='your entity id',
        examples=['spn:d6b4feb1-a0bb-408a-b813-6e4eba3e5fef'],
    )
    specification_url: Optional[str] = Field(
        None,
        description='Federation metadata document',
        examples=[
            'https://login.microsoftonline.com/e8656a10-4ec3-4cea-aa49-cbe9424c312d/federationmetadata/2007-06/federationmetadata.xml'
        ],
    )


class FieldsInMetadata(BaseModel):
    annotations: Optional[List[str]] = None
    lines: Optional[List[str]] = None
    meta_information: Optional[List[str]] = None


class FileModelGet(BaseModel):
    embedded_attachment: Optional[bool] = None
    filehash: Optional[str] = None
    filename: Optional[str] = None
    leaf: Optional[bool] = None
    page: Optional[int] = None
    page_count: Optional[int] = None


class Type1(Enum):
    project = 'project'
    inbox = 'inbox'
    document = 'document'


class FilterAtom(BaseModel):
    end_date: Optional[datetime_aliased] = None
    list: Optional[List[str]] = None
    start_date: Optional[datetime_aliased] = None
    type: Type1 = Field(..., examples=['project'])


class FilterOIdModel(BaseModel):
    field_oid: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = (
        Field(
            None,
            alias='$oid',
            description='Inbox ID',
            examples=['abcdef123456789abcdef123'],
        )
    )


class FilterOIdModelDoc(BaseModel):
    field_oid: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = (
        Field(
            None,
            alias='$oid',
            description='Document ID',
            examples=['abcdef123456789abcdef123'],
        )
    )


class FilterTimeModel(BaseModel):
    field_gt: Optional[datetime_aliased] = Field(None, alias='$gt')
    field_gte: Optional[datetime_aliased] = Field(None, alias='$gte')
    field_lt: Optional[datetime_aliased] = Field(None, alias='$lt')
    field_lte: Optional[datetime_aliased] = Field(None, alias='$lte')


class FilterTimingsFieldModel(BaseModel):
    timeFrom: Optional[str] = None
    timeTo: Optional[str] = None


class FilterTimingsModel(BaseModel):
    done_time: Optional[FilterTimeModel] = None
    feedback_time: Optional[FilterTimeModel] = None
    receive_time: Optional[FilterTimeModel] = None
    review_start_time: Optional[FilterTimeModel] = None
    start_time: Optional[FilterTimeModel] = None


class InboxModelPatch(BaseModel):
    name: Optional[str] = None
    project: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = (
        Field(None, examples=['abcdef123456789abcdef123'])
    )


class InboxModelPost(BaseModel):
    name: str
    project: constr(pattern=r'[A-z0-9]', min_length=24, max_length=24) = Field(
        ..., examples=['abcdef123456789abcdef123']
    )


class Type2(Enum):
    webhook = 'webhook'
    dropbox = 'dropbox'
    office365 = 'office365'
    email = 'email'
    imap = 'imap'
    sftp = 'sftp'
    smtp = 'smtp'
    service_bus = 'service_bus'


class IntegrationModelGet(BaseModel):
    type: Optional[Type2] = Field(None, examples=['webhook'])


class KeyValyePairSettingsModel(BaseModel):
    classification_cutoff: Optional[int] = None
    rule_config: Optional[Dict[str, Any]] = None
    splitting_cutoff: Optional[int] = None
    uer_pre_config: Optional[Dict[str, Any]] = None


class Category(Enum):
    annotation = 'annotation'
    tag = 'tag'
    separator = 'separator'
    computed = 'computed'


class Scope(Enum):
    document = 'document'
    page = 'page'
    section = 'section'


class Type3(Enum):
    string = 'string'
    date = 'date'
    integer = 'integer'
    float = 'float'
    currency = 'currency'
    alphanumeric = 'alphanumeric'
    national_identification_number_be = 'national_identification_number_be'
    boolean = 'boolean'
    datetime = 'datetime'
    address = 'address'


class MetadataOptions(BaseModel):
    columns: Optional[List[str]] = None
    fields: Optional[FieldsInMetadata] = None
    include: Optional[bool] = False
    rename: Optional[Dict[str, Any]] = None


class OptionModel(BaseModel):
    active: bool
    display_name: Optional[str] = None
    name: str


class PermissionsModel(BaseModel):
    create_dropbox_user: Optional[bool] = False
    create_inbox: Optional[bool] = False
    create_webhook: Optional[bool] = False
    de_escalate_document: Optional[bool] = False
    delete_tenant: Optional[bool] = False
    delete_webhook: Optional[bool] = False
    edit_backend_settings: Optional[bool] = False
    edit_beats: Optional[bool] = False
    edit_dashboard_settings: Optional[bool] = False
    edit_data_retention_settings: Optional[bool] = False
    edit_flow_settings: Optional[bool] = False
    edit_format_settings: Optional[bool] = False
    edit_integration_settings: Optional[bool] = False
    edit_integrations: Optional[bool] = False
    edit_predictor_settings: Optional[bool] = False
    edit_reports: Optional[bool] = False
    edit_retention_settings: Optional[bool] = False
    edit_review_settings: Optional[bool] = False
    edit_roles: Optional[bool] = False
    edit_sampling_settings: Optional[bool] = False
    edit_security_settings: Optional[bool] = False
    edit_templates: Optional[bool] = False
    edit_thresholds_settings: Optional[bool] = False
    edit_translations: Optional[bool] = False
    edit_users: Optional[bool] = False
    escalate_document: Optional[bool] = False
    never_twice: Optional[bool] = False
    pick_next_escalated: Optional[bool] = False
    read_beats: Optional[bool] = False
    read_data_retention_settings: Optional[bool] = False
    read_feedback: Optional[bool] = False
    read_integrations: Optional[bool] = False
    read_release_notes: Optional[bool] = False
    read_reports: Optional[bool] = False
    read_thresholds_settings: Optional[bool] = False
    read_webhook: Optional[bool] = False
    reject_document: Optional[bool] = False
    release_lock: Optional[bool] = False
    review: Optional[bool] = False
    submit: Optional[bool] = False
    update_webhook: Optional[bool] = False
    upload: Optional[bool] = False
    versions: Optional[bool] = False
    view_api_keys: Optional[bool] = False
    view_list: Optional[bool] = False
    view_projects: Optional[bool] = False
    view_statistics: Optional[bool] = False
    view_templates: Optional[bool] = False
    write_feedback: Optional[bool] = False
    write_release_notes: Optional[bool] = False


class ProjectModelPatch(BaseModel):
    default_document_type: Optional[str] = Field(
        None, description='This format is chosen as fallback'
    )
    default_format: Optional[str] = Field(
        None, description='This format is chosen as fallback'
    )
    formats: Optional[List[str]] = Field(None, min_length=1)
    name: Optional[str] = None
    split_into_sections: Optional[bool] = None
    sub_page_splitting: Optional[bool] = None
    timeout: Optional[int] = Field(None, examples=[10])


class ProjectModelPost(BaseModel):
    default_document_type: Optional[str] = Field(
        None, description='This format is chosen as fallback'
    )
    default_format: Optional[str] = Field(
        None, description='This format is chosen as fallback'
    )
    formats: List[str] = Field(..., min_length=1)
    name: str
    split_into_sections: bool
    sub_page_splitting: bool
    timeout: Optional[int] = Field(None, examples=[10])


class DeliveryMethod(Enum):
    email = 'email'
    download = 'download'


class Source(Enum):
    human = 'human'
    machine = 'machine'


class ResetPasswordModelPost(BaseModel):
    new_password: Optional[str] = Field(None, description="the new user's password")
    token: Optional[str] = Field(None, description='the token to reset the password')
    user_name: Optional[str] = Field(None, description='the username')


class ReviewSettingsModelGet(BaseModel):
    default_zoom: Optional[Dict[str, Any]] = None
    first_toolbar: Optional[Dict[str, Any]] = None
    lock_expiry: Optional[Dict[str, Any]] = None
    review_options: Optional[Dict[str, Any]] = None
    second_toolbar: Optional[Dict[str, Any]] = None


class ReviewSettingsModelPatch(BaseModel):
    scope: Optional[str] = None
    settings: Optional[ReviewSettingsModelGet] = None


class RoleModelPatch(BaseModel):
    name: Optional[str] = None
    permissions: Optional[PermissionsModel] = None


class RoleModelPost(BaseModel):
    name: str
    permissions: PermissionsModel


class RoutingAtom(BaseModel):
    and_conditions: Optional[Dict[str, Any]] = None
    target: Optional[str] = None


class RuleConfigModel(BaseModel):
    rule_config: Optional[Dict[str, Any]] = None


class RuleConfigModelGet(RuleConfigModel):
    scope: str


class SamplingModelPatch(BaseModel):
    auto_reject_FFR: Optional[int] = None
    auto_submit_FFR: Optional[int] = None
    second_pass_FFR: Optional[int] = None
    second_pass_STP: Optional[int] = None


class ScopeModel(BaseModel):
    id: Optional[str] = None
    level: Optional[str] = None


class SectionAtom(BaseModel):
    confidence: Optional[int] = None
    document_type: Optional[str] = None
    format: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = Field(
        None, examples=['abcdef123456789abcdef123']
    )
    page: int


class SectionModel(BaseModel):
    name: str
    page: int


class SequenceColumnsAtomModel(BaseModel):
    checked: Optional[bool] = None
    field: Optional[str] = None
    label: Optional[str] = None


class SimpleInclude(BaseModel):
    include: Optional[bool] = False


class SpanDictModel(BaseModel):
    field_: Optional[Dict[str, str]] = Field(None, alias='*')


class Type4(Enum):
    saml = 'saml'


class SsoConfigModel(BaseModel):
    extra: Optional[ExtraModel] = None
    provider: str = Field(
        ...,
        description='usually your company name, only used for visualisation: log in as <provider> employee',
    )
    type: Optional[Type4] = Field(
        'saml',
        description='Type of SSO integration, for now only SAML is supported',
        examples=['saml'],
    )
    url: Optional[str] = Field(
        None,
        description='SAML-P sign-on endpoint',
        examples=[
            'https://login.microsoftonline.com/e8656a10-4ec3-4cea-aa49-cbe9424c312d/saml2'
        ],
    )


class SsoConfigModelGet(BaseModel):
    extra: Optional[ExtraModel] = None
    id: str
    provider: str = Field(
        ...,
        description='usually your company name, only used for visualisation: log in as <provider> employee',
    )
    type: Optional[Type4] = Field(
        'saml',
        description='Type of SSO integration, for now only SAML is supported',
        examples=['saml'],
    )
    url: Optional[str] = Field(
        None,
        description='SAML-P sign-on endpoint',
        examples=[
            'https://login.microsoftonline.com/e8656a10-4ec3-4cea-aa49-cbe9424c312d/saml2'
        ],
    )


class Type6(Enum):
    oauth = 'oauth'
    saml = 'saml'


class SsoModel(BaseModel):
    token: Optional[str] = Field(
        None, description='the access token (JWT for oauth or SAML response)'
    )
    type: Optional[Type6] = Field(
        None, description='the type of SSO token', examples=['oauth']
    )


class StateModelGet(BaseModel):
    by: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = Field(
        None, examples=['abcdef123456789abcdef123']
    )
    since: Optional[datetime_aliased] = None
    value: Optional[bool] = None


class StatusDataModel(BaseModel):
    archived: Optional[bool] = None
    data: Optional[bool] = None
    escalate: Optional[bool] = None
    feedback: Optional[bool] = None
    lock: Optional[bool] = None
    ready_accepted: Optional[bool] = None
    ready_attempts: Optional[int] = None
    reject: Optional[bool] = None
    reject_accepted: Optional[bool] = None
    reject_attempts: Optional[int] = None
    sampling: Optional[bool] = None
    submit_accepted: Optional[bool] = None
    submit_attempts: Optional[int] = None
    success: Optional[bool] = None


class TagFieldModelGet(BaseModel):
    tag_fields: Optional[Dict[str, Any]] = None


class TenantModelGet(BaseModel):
    id: str


class TenantModelPatch(BaseModel):
    code: Optional[int] = None
    email: Optional[str] = None


class ThresholdModel(BaseModel):
    annotations: Optional[Dict[str, Any]] = None
    lines: Optional[Dict[str, Any]] = None
    sections: Optional[Dict[str, Any]] = None


class TimingsModelGet(BaseModel):
    done_time: Optional[datetime_aliased] = None
    feedback_time: Optional[datetime_aliased] = None
    processing_period: Optional[float_aliased] = None
    receive_time: Optional[datetime_aliased] = None
    start_time: Optional[datetime_aliased] = None
    submit_time: Optional[datetime_aliased] = None


class TokenReplyModel(BaseModel):
    authentication_token: str


class TokenRoleModel(BaseModel):
    document_id: Optional[str] = Field(None, description='limited to a document')
    inbox: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = Field(
        None, examples=['abcdef123456789abcdef123']
    )
    role: constr(pattern=r'[A-z0-9]', min_length=24, max_length=24) = Field(
        ..., examples=['abcdef123456789abcdef123']
    )


class UserRoleModel(BaseModel):
    document_id: Optional[str] = Field(None, description='limited to a document')
    inbox: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = Field(
        None, examples=['abcdef123456789abcdef123']
    )
    role: constr(pattern=r'[A-z0-9]', min_length=24, max_length=24) = Field(
        ..., examples=['abcdef123456789abcdef123']
    )


class UserRoleModelPatch(BaseModel):
    inbox: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = Field(
        None, examples=['abcdef123456789abcdef123']
    )
    role: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = Field(
        None, examples=['abcdef123456789abcdef123']
    )


class VersionCompare(BaseModel):
    cmp_version_1: str
    cmp_version_2: str
    name: str


class WorkflowModel(BaseModel):
    graph: Optional[Dict[str, Any]] = None
    links: Optional[Dict[str, Any]] = None
    nodes: Optional[Dict[str, Any]] = None


class Annotations(BaseModel):
    string: Optional[List[EvaluationAtom]] = None


class Cells(BaseModel):
    string: Optional[EvaluationAtom] = None


class ColumnBound(BaseModel):
    field_name: Optional[str] = None
    x_bounds: Optional[List[int]] = Field(None, max_length=2, min_length=2)


class Dictionary(BaseModel):
    pass


class Lines(BaseModel):
    string: Optional[List[Cells]] = None


class DocumentsPostRequest(BaseModel):
    experimental: Optional[bool] = Field(
        None, description='Use the experimental processing workflow'
    )
    file: bytes = Field(..., description='File to process')
    inbox_id: Optional[str] = Field(
        None, description='Inbox to use. Default to the **invoice** inbox'
    )
    key_value_flag: Optional[bool] = Field(
        True,
        description='If true the result will only contains mapping of prediction = value',
    )


class Reviewer(Enum):
    Human = 'Human'
    Machine = 'Machine'


class DocumentsInboxIdPostRequest(BaseModel):
    experimental: Optional[bool] = Field(
        None, description='Use the experimental processing workflow'
    )
    file: bytes = Field(..., description='File to process')
    key_value_flag: Optional[bool] = Field(
        False,
        description='If true the result will only contains mapping of prediction = value',
    )
    sync: Optional[bool] = Field(
        True, description='Flag enable sync or async processing'
    )


class InboxesInboxIdReprocessPostRequest(BaseModel):
    hints: Optional[str] = Field(
        None,
        description='Additional hints as a dictionary. Example: {"VAT_number":{"blacklist":"XXXX.XXX.XXX", "whitelist": ["YYYY.YYY.YYY", "ZZZZ.ZZZ.ZZZ"]}}',
    )


class DeliveryMethod1(Enum):
    download = 'download'
    email = 'email'


class RuleConfigGetResponse(RootModel[List[RuleConfigModelGet]]):
    root: List[RuleConfigModelGet]


class StatsInboxIdBlueDotsPostRequest(BaseModel):
    end_date: Optional[datetime_aliased] = '2023-03-02T13:36:39.250962'
    fields_to_exclude: Optional[str] = Field('', description='gross_amount,due_date')
    level: Optional[str] = Field('file', description='possible values: file, field')
    option_level_fields: Optional[str] = Field('', description='invoice,receipt')
    start_date: Optional[datetime_aliased] = '2023-02-02T13:36:39.250933'
    version_name: Optional[constr(pattern=r'^[A-z0-9_-]+$')] = Field(
        'submitted', description='provide the version name to evaluate'
    )


class APIKeyModel(BaseModel):
    active: bool = Field(..., description='Is the API Key active or not')
    expire_at: Optional[datetime_aliased] = Field(
        None, description='The date at which the API Key will expire'
    )
    roles: Optional[List[TokenRoleModel]] = Field(None, description='the user roles')
    token: str = Field(..., description='Token value')
    user: str = Field(..., description='Bearer user')


class APIKeyRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    active: Optional[bool] = Field(None, description='Is the API Key active or not')
    expire_at: Optional[datetime_aliased] = Field(None, description='Expiration date')
    roles: List[TokenRoleModel] = Field(
        ..., description='Roles to grant to this token bearer'
    )
    user: str = Field(..., description='User to give to the bearer')


class ColumnsHeaders(BaseModel):
    columns_headers: Optional[List[SequenceColumnsAtomModel]] = None
    inline_headers: Optional[List[SequenceColumnsAtomModel]] = None


class ConnectionModelPost(BaseModel):
    event: Event = Field(..., examples=['document_predict'])
    integration: constr(pattern=r'[A-z0-9]', min_length=24, max_length=24) = Field(
        ..., examples=['abcdef123456789abcdef123']
    )
    routing: Optional[List[RoutingAtom]] = None
    scope: Optional[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)] = Field(
        None, examples=['abcdef123456789abcdef123']
    )
    what: What = Field(..., examples=['original'])


class CustomOutputPost(BaseModel):
    custom: Optional[CustomAtom] = None
    excel: Optional[ExcelAtom] = None
    filter: Optional[FilterAtom] = None


class DashboardSettingsModelGet(BaseModel):
    autolearning: Optional[bool] = None
    dashboard_timeout: Optional[int] = None
    default_date_range: Optional[Dict[str, Any]] = None
    default_inbox_size: Optional[Dict[str, Any]] = None
    default_inbox_sorting: Optional[Dict[str, Any]] = None
    flexible_filters: Optional[List[Dict[str, Any]]] = None
    navigation_menu: Optional[Dict[str, Any]] = None
    process_unreadable: Optional[bool] = None
    sequence_columns_of_inbox: Optional[ColumnsHeaders] = None
    show_digital_annotations: Optional[bool] = None
    show_filters: Optional[Dict[str, Any]] = None
    show_inbox_actions: Optional[Dict[str, Any]] = None
    studio_format_options: Optional[Dict[str, Any]] = None
    upload_options: Optional[Dict[str, Any]] = None
    welcome_counters: Optional[bool] = None
    welcome_counters_options: Optional[Dict[str, Any]] = None


class DashboardSettingsModelPatch(BaseModel):
    scope: Optional[str] = None
    settings: Optional[DashboardSettingsModelGet] = None


class DataRetentionModel(BaseModel):
    scope: Optional[ScopeModel] = None
    settings: Optional[List[DataRetentionAtomModel]] = None


class DocumentModelGet(BaseModel):
    escalate: Optional[StateModelGet] = None
    feedback: Optional[Dict[str, Any]] = None
    files: Optional[List[FileModelGet]] = None
    flag_for_review: Optional[bool] = None
    id: str
    inbox: constr(pattern=r'[A-z0-9]', min_length=24, max_length=24) = Field(
        ..., examples=['abcdef123456789abcdef123']
    )
    last_version: Optional[str] = None
    lock: Optional[StateModelGet] = None
    meta_information: Optional[Dict[str, Any]] = None
    opened_by: Optional[List[StateModelGet]] = None
    original_filename: str
    page_count: int
    prediction: Optional[Dict[str, Any]] = None
    reject: Optional[StateModelGet] = None
    status_data: Optional[StatusDataModel] = None
    submitted: Optional[StateModelGet] = None
    timings: Optional[TimingsModelGet] = None
    usage_data: Optional[Dict[str, Any]] = None
    versions: Optional[List[Dict[str, Any]]] = None


class DocumentModelPaginated(BaseModel):
    page: Optional[int] = Field(None, description='Current page number')
    per_page: Optional[int] = Field(None, description='Number of results per page')
    results: Optional[List[DocumentModelGet]] = None
    total: Optional[int] = Field(None, description='Total number of results')


class FieldSettingsModel(BaseModel):
    default_value: Optional[str] = None
    expected_pattern: Optional[str] = None
    nested_field_patterns: Optional[SpanDictModel] = None
    override_default_patterns: Optional[bool] = None


class FilterOIdListModel(BaseModel):
    field_in: Optional[List[FilterOIdModel]] = Field(None, alias='$in')


class InboxModelGet(InboxModelPost):
    id: str


class LabelModel(BaseModel):
    category: Optional[Category] = Field('annotation', examples=['annotation'])
    count_in_evaluation: Optional[bool] = Field(
        True,
        description='A flag that determines whether to count this field for evaluation',
    )
    description: Optional[str] = Field(None, description='A description of this field')
    display_name: Optional[str] = None
    field_name: str
    formula: Optional[str] = Field(
        None, description='An excel-like formula for conditional logic'
    )
    initialized: Optional[bool] = True
    is_library: Optional[bool] = False
    mandatory: Optional[bool] = True
    mandatory_if: Optional[Dict[str, Any]] = Field(
        None, description='A value to decide if mandatory based on other field'
    )
    multiple: Optional[bool] = True
    options: Optional[List[OptionModel]] = None
    scope: Optional[Scope] = Field('section', examples=['section'])
    type: Optional[Type3] = Field('string', examples=['string'])
    visible: Optional[bool] = True
    visible_if: Optional[Dict[str, Any]] = Field(
        None, description='A value to decide if shown in UI'
    )


class ReportModelPost(BaseModel):
    annotations: Optional[AnnotationOptions] = None
    automation_blockers: Optional[SimpleInclude] = None
    automation_score: Optional[SimpleInclude] = None
    automation_what_if: Optional[SimpleInclude] = None
    cover: Optional[SimpleInclude] = None
    documents: Optional[
        List[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)]
    ] = None
    elapse_time: Optional[SimpleInclude] = None
    evaluations: Optional[EvaluationsOptions] = None
    field_automation: Optional[SimpleInclude] = None
    inboxes: Optional[
        List[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)]
    ] = None
    lines: Optional[SimpleInclude] = None
    metadata: Optional[MetadataOptions] = None
    name: Optional[str] = None
    page_classification: Optional[SimpleInclude] = None
    projects: Optional[
        List[constr(pattern=r'[A-z0-9]', min_length=24, max_length=24)]
    ] = None
    sections: Optional[SimpleInclude] = None
    separator: Optional[str] = '|'
    sources: Optional[List[Source]] = ['human', 'machine']
    text: Optional[SimpleInclude] = None
    version_name: Optional[str] = None


class RoleModelGet(RoleModelPost):
    id: str


class SamplingModelGet(SamplingModelPatch):
    scope: str


class SettingThresholdModelPatch(BaseModel):
    thresholds: Optional[ThresholdModel] = None


class StatusDataPost(BaseModel):
    escalate: Optional[StateModelGet] = None
    last_version: Optional[str] = None
    lock: Optional[StateModelGet] = None
    opened_by: Optional[StateModelGet] = None
    reject: Optional[StateModelGet] = None
    status_data: Optional[StatusDataModel] = None
    submitted: Optional[StateModelGet] = None
    timings: Optional[TimingsModelGet] = None


class TableAnnotationPost(BaseModel):
    bottom_right: Optional[List[int]] = Field(None, max_length=3, min_length=3)
    columns: Optional[List[ColumnBound]] = None
    first_row_y_bounds: Optional[List[int]] = Field(None, max_length=2, min_length=2)
    header_bottom_y: Optional[int] = None
    name: Optional[str] = None
    top_left: Optional[List[int]] = Field(None, max_length=3, min_length=3)


class TableModel(BaseModel):
    collapsed: Optional[bool] = None
    columns: Optional[List[LabelModel]] = None
    contains_line_items: Optional[bool] = None
    initialized: Optional[bool] = None
    label: Optional[str] = None
    scope: Optional[Scope] = Field('section', examples=['section'])


class TokenModelBase(BaseModel):
    roles: Optional[List[TokenRoleModel]] = Field(None, description='the user roles')
    username: str = Field(..., description='the user username')


class UserModelGet(BaseModel):
    active: bool = Field(
        ..., description='Inactive users have to reset their password first'
    )
    confirmed_at: Optional[datetime_aliased] = None
    id: str
    roles: List[UserRoleModel] = Field(..., description='the user roles')
    username: str = Field(..., description='the user username')


class UserModelPatch(BaseModel):
    roles: Optional[List[UserRoleModelPatch]] = Field(
        None, description='the user roles'
    )
    username: Optional[str] = Field(None, description='the user username')


class UserModelPost(BaseModel):
    active: bool = Field(
        ..., description='Inactive users have to reset their password first'
    )
    password: Optional[str] = Field(None, description='the user password')
    roles: List[UserRoleModel] = Field(..., description='the user roles')
    username: str = Field(..., description='the user username')


class VersionPost(BaseModel):
    annotations: Optional[Annotations] = None
    cmp_version: Optional[str] = None
    evaluate: Optional[bool] = True
    lines: Optional[Lines] = None
    name: Optional[str] = None
    sections: Optional[List[SectionAtom]] = None


class AuthApiKeyGetResponse(RootModel[List[APIKeyModel]]):
    root: List[APIKeyModel]


class AuthApiKeyInboxInboxIdGetResponse(RootModel[List[APIKeyModel]]):
    root: List[APIKeyModel]


class DataRetentionSettingsGetResponse(RootModel[List[DataRetentionModel]]):
    root: List[DataRetentionModel]


class InboxesGetResponse(RootModel[List[InboxModelGet]]):
    root: List[InboxModelGet]


class InboxesInboxIdDocumentsGetResponse(RootModel[List[DocumentModelGet]]):
    root: List[DocumentModelGet]


class InboxesInboxIdPaginatedGetResponse(RootModel[List[DocumentModelPaginated]]):
    root: List[DocumentModelPaginated]


class RolesGetResponse(RootModel[List[RoleModelGet]]):
    root: List[RoleModelGet]


class SamplingSettingsGetResponse(RootModel[List[SamplingModelGet]]):
    root: List[SamplingModelGet]


class UsersGetResponse(RootModel[List[UserModelGet]]):
    root: List[UserModelGet]


class ConnectionModelGet(ConnectionModelPost):
    id: str


class FieldSettingsDictModel(BaseModel):
    field_: Optional[Dict[str, FieldSettingsModel]] = Field(None, alias='*')


class FilterModel(BaseModel):
    field_id: Optional[FilterOIdModelDoc] = Field(None, alias='_id')
    inbox: Optional[FilterOIdListModel] = None
    timing_fields: Optional[FilterTimingsFieldModel] = None
    timings: Optional[FilterTimingsModel] = None


class FormatModelGet(BaseModel):
    document_types: Optional[List[DocumentTypeModel]] = None
    id: str
    labels: Optional[List[LabelModel]] = None
    name: Optional[str] = None
    separators: Optional[List[SectionModel]] = []
    table_types: Optional[List[TableModel]] = None


class FormatModelPatch(BaseModel):
    display_name: Optional[str] = None
    document_types: Optional[List[DocumentTypeModel]] = None
    labels: Optional[List[LabelModel]] = None
    name: Optional[str] = None
    separators: Optional[List[SectionModel]] = []
    table_types: Optional[List[TableModel]] = None


class FormatModelPost(BaseModel):
    display_name: Optional[str] = None
    document_types: Optional[List[DocumentTypeModel]] = None
    labels: List[LabelModel]
    name: str
    separators: Optional[List[SectionModel]] = []
    table_types: Optional[List[TableModel]] = None


class ReportModelFullGenerate(ReportModelPost):
    delivery_method: Optional[DeliveryMethod] = Field('download', examples=['email'])
    email: Optional[str] = None
    end_date: Optional[datetime_aliased] = None
    start_date: Optional[datetime_aliased] = None


class ReportModelGet(ReportModelPost):
    id: str


class SettingThresholdModelGet(SettingThresholdModelPatch):
    scope: Optional[str] = ''


class TableExtractionSettingsModel(BaseModel):
    field_settings: Optional[FieldSettingsDictModel] = None


class ConnectionsGetResponse(RootModel[List[ConnectionModelGet]]):
    root: List[ConnectionModelGet]


class ReportsGetResponse(RootModel[List[ReportModelGet]]):
    root: List[ReportModelGet]


class ThresholdSettingsGetResponse(RootModel[List[SettingThresholdModelGet]]):
    root: List[SettingThresholdModelGet]


class AggregationPipelinePost(BaseModel):
    filter: Optional[FilterModel] = None
    type: Optional[Type] = Field(None, examples=['inbox'])


class PredictorSettingModel(BaseModel):
    blacklist: Optional[Dict[str, Any]] = None
    expected_values: Optional[Dict[str, Any]] = None
    fallback: Optional[Dict[str, Any]] = None
    key_value_pairs: Optional[KeyValyePairSettingsModel] = None
    table_extraction_settings: Optional[TableExtractionSettingsModel] = None
    whitelist: Optional[Dict[str, Any]] = None


class PredictorModelGet(PredictorSettingModel):
    scope: str


class PredictorSettingsGetResponse(RootModel[List[PredictorModelGet]]):
    root: List[PredictorModelGet]
